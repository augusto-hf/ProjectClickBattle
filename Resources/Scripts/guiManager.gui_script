-- integer
_G.Numbers_update_speed = 0.1
_G.Clicks_per_second = 0
_G.Number_of_click = 0
_G.Phase = 0
_G.Enemy_index = 0
_G.Money = 1000
-- float
-- components
local counter_text
-- bool
local is_respawning = false

_G.perlin = require "Resources.ExternalModules.perlin"
local druid = require("druid.druid")
local seed = require "Resources.Module.SeedModule"
_G.vfx = require "Resources.Module.VFXModules"
_G.skills = require "Resources.Module.SkillsInfoModule"
_G.click_skills = require "Resources.Module.ClickSkillsInfoModule" 
_G.damage = require "Resources.Module.DamageModule"
_G.cursor = require "Resources.Module.CursorModule"
_G.counter_functions = require "Resources.Module.ClickCounterModule"
local enemy = require "Resources.Module.EnemyModule"
local debug = require "Resources.Module.DebugModule"
local combat_functions = require "Resources.Module.CombatModule"
local shop_buttons = require "Resources.Module.ShopButtonsLib"
local passive_skills_functions = require "Resources.Module.PassiveSkillsModule"
local active_skills = require "Resources.Module.ActiveSkillsModule"

_G.current_enemy = enemy.respawner()


function init(self)
	self.druid = druid.new(self)
	local druidScrollComponent = self.druid:new_scroll("Shop", "Shop_items")
	:set_extra_stretch_size(1000)
	:set_inert(false)
	:set_horizontal_scroll(true)
	
	-- profiler.enable_ui(true)
	_G.Enemy_node = gui.get_node("Enemy")
	_G.Enemy_node_position = gui.get_position(_G.Enemy_node)
	seed.generate_seed()
	enemy.generate_seeded_infos()
	_G.vfx.setup()
	
	msg.post(".", "acquire_input_focus")
	counter_text = gui.get_node("counter_text")
	self.speed = 50

	_G.Enemy_index = 0
	_G.current_enemy = enemy.respawner()
	
	passive_skills_functions.update_tick_damage()
	
	timer.delay(_G.Numbers_update_speed / 10, true, function()
		_G.damage.deal("neutral", _G.Clicks_per_second * 0.1)
		_G.counter_functions.SmoothAddClicksFromPassiveDamage()
	end)
end

function update(self, dt)
	combat_functions.dealDamage()
	gui.set_text(counter_text, math.floor(_G.Number_of_click))

	shop_buttons.UpdateShopInfo()
	enemy.show_hp()
	debug.show_debug_info()
	_G.vfx.run_on_update_effects()

	if _G.current_enemy.hp <= 0 and _G.current_enemy.is_alive then
		print("Enemy defeated. Current Enemy Index:", _G.Enemy_index)
		_G.current_enemy = enemy.respawner()
	end
end

function on_input(self, action_id, action)
	_G.cursor.move_cursor_sprite(action)
	_G.vfx.run_on_input_action(action)
	if action_id == hash("touch") and action.pressed then
		-- In Game
		if gui.pick_node(_G.Enemy_node, action.x, action.y)then
			_G.damage.deal("neutral", _G.cursor.click_damage)
			_G.vfx.trigger_damage_number_on_click(action, _G.cursor.click_damage, "neutral")
			_G.damage.deal_multiple(_G.cursor.extra_damage_value)
			if _G.cursor.extra_damage_value["neutral"] > 0 then
				_G.vfx.trigger_damage_number("neutral", _G.cursor.extra_damage_value["neutral"])
			end
		end
		
		-- In Game/skill
		
		local click_skill_button_heavy_glove = gui.get_node("click_skill_button_heavy_glove")
		if gui.pick_node(click_skill_button_heavy_glove, action.x, action.y)then
			active_skills.UseClickSkill(_G.click_skills.heavy_gloves)
		end
		
		-- Shop

		local warrior_soap_upgrade_button =  gui.get_node("warrior_soap_upgrade_button")
		if gui.pick_node(warrior_soap_upgrade_button, action.x, action.y)then
			shop_buttons.SkillUpgrade(_G.skills.warrior_soap)
			passive_skills_functions.update_tick_damage()
		end

		-- Shop -- Cursor Passives
		--local heavy_glove_upgrade_button = gui.get_node("heavy_glove_upgrade_button")
		--if gui.pick_node(heavy_glove_upgrade_button, action.x, action.y)then
			--shop_buttons.PassiveUpgrade(_G.click_skills.heavy_gloves)
		--end
		
	end
end