-- integer
_G.Numbers_update_speed = 0.1
_G.Clicks_per_second = 0
_G.Number_of_click = 0
_G.Phase = 0
_G.Enemy_index = 0
-- float
-- components
local counter_text
-- bool

local seed = require "Resources.Module.SeedModule"
_G.skills = require "Resources.Module.SkillsInfoModule"
_G.damage = require "Resources.Module.DamageModule"
local cursor = require "Resources.Module.CursorModule"
local counter_functions = require "Resources.Module.ClickCounterModule"
local enemy = require "Resources.Module.EnemyModule"
local debug = require "Resources.Module.DebugModule"
local combat_functions = require "Resources.Module.CombatModule"
local shop_buttons = require "Resources.Module.ShopButtonsLib"
local passive_skills_functions = require "Resources.Module.PassiveSkillsModule"
local active_skills = require "Resources.Module.ActiveSkillsModule"

_G.current_enemy = enemy.respawner()

function init(self)
	seed.generate_seed()
	enemy.generate_seeded_infos()
	
	msg.post(".", "acquire_input_focus")
	counter_text = gui.get_node("counter_text")
	self.speed = 50

	_G.Enemy_index = 0
	_G.current_enemy = enemy.respawner()
	
	passive_skills_functions.update_tick_damage()
	
	timer.delay(_G.Numbers_update_speed, true, function()
		counter_functions.SmoothAddClicks()
	end)
	
end

function update(self, dt)
	_G.damage.add("neutral", _G.Number_of_click)
	combat_functions.dealDamage()
	gui.set_text(counter_text, math.floor(_G.Number_of_click))
	
	enemy.show_hp()
	debug.show_debug_info()

	if _G.current_enemy.hp <= 0 and _G.current_enemy.is_alive then
		print("Enemy defeated. Current Enemy Index:", _G.Enemy_index)
		_G.current_enemy = enemy.respawner()
	end
end

function on_input(self, action_id, action)
	cursor.move_cursor_sprite(action)
	if action_id == hash("touch") and action.pressed then
		
		-- In Game
		local enemy_sprite = gui.get_node("Enemy")
		if gui.pick_node(enemy_sprite, action.x, action.y)then
			_G.Number_of_click = _G.Number_of_click + cursor.click_damage
		end
		
		-- In Game/skill
		local weapon_skill_button = gui.get_node("skill_button_weapon")
		if gui.pick_node(weapon_skill_button, action.x, action.y)then
			active_skills.UseSkill(_G.skills.weapon)
		end
		
		-- Shop
		local cursor_upgrade_button = gui.get_node("cursor_upgrade_button")
		if gui.pick_node(cursor_upgrade_button, action.x, action.y)then
			shop_buttons.CursorUpgrade(cursor)
		end
		
		local weapon_upgrade_button =  gui.get_node("weapon_upgrade_button")
		if gui.pick_node(weapon_upgrade_button, action.x, action.y)then
			shop_buttons.SkillUpgrade(_G.skills.weapon)
			passive_skills_functions.update_tick_damage()
		end
	end
end