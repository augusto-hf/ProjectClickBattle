-- integer
_G.Numbers_update_speed = 1
_G.Clicks_per_second = 0
_G.Number_of_click = 0
_G.Enemy_index = 0
_G.Money = 0
_G.Highest_money = 0
-- float
-- components
local counter_text
-- bool
local is_respawning = false

_G.perlin = require "Resources.ExternalModules.perlin"
local seed = require "Resources.Module.InternalModules.SeedModule"
_G.vfx = require "Resources.Module.VisualModules.VFXModules"
_G.skills = require "Resources.Module.InfoModules.SkillsInfoModule"
_G.damage = require "Resources.Module.InternalModules.DamageModule"
_G.cursor = require "Resources.Module.CursorModule"
_G.counter_functions = require "Resources.Module.VisualModules.ClickCounterModule"
local enemy = require "Resources.Module.InternalModules.EnemyModule"
local debug = require "Resources.Module.DebugModule"
local combat_functions = require "Resources.Module.InternalModules.CombatModule"
local shop_buttons = require "Resources.Module.ButtonsModules.ShopButtonsLib"
local passive_skills_functions = require "Resources.Module.ButtonsModules.PassiveSkillsModule"
local active_skills = require "Resources.Module.ButtonsModules.ActiveSkillsModule"
local druid_manager = require "Resources.Module.InternalModules.DruidModules.DruidManagerModule"

_G.current_enemy = enemy.respawner()

function init(self)
	druid_manager:initialization(self)
	
	-- profiler.enable_ui(true)
	_G.Enemy_node = gui.get_node("Enemy")
	_G.Enemy_node_position = gui.get_position(_G.Enemy_node)
	seed.generate_seed()
	enemy.generate_seeded_infos()
	_G.vfx.setup()
	
	msg.post(".", "acquire_input_focus")
	counter_text = gui.get_node("counter_text")
	self.speed = 50

	_G.Enemy_index = 0
	_G.current_enemy = enemy.respawner()
	
	passive_skills_functions.update_tick_damage()
	
	timer.delay(_G.Numbers_update_speed, true, function()
		print("desgra√ßa")
		_G.damage.deal("neutral", _G.Clicks_per_second)
	end)

	timer.delay(0.1, true, function()
		_G.counter_functions.SmoothAddClicksFromPassiveDamage(0.1)
	end)
	
	
	
	gui.set_text(gui.get_node(_G.cursor.price_text), math.max(_G.cursor.starting_price, _G.cursor.upgrade_level * _G.cursor.starting_price))
	
	for _, skill in ipairs(_G.skills.all_skills_passive_damage) do
		-- set prices
		local price_text_node = gui.get_node(hash(skill.price_text))
		gui.set_text(price_text_node, skill.starting_price)

		--lock heroes
		shop_buttons.lock_skill(skill)
		active_skills.lock_skill(skill)
	end

end

function update(self, dt)
	druid_manager:update(dt)
	
	combat_functions.dealDamage()
	gui.set_text(counter_text, math.floor(_G.Number_of_click))
	
	shop_buttons.UpdateShopInfo()
	enemy.show_hp()
	debug.manage_debug_info()
	_G.vfx.run_on_update_effects()
	
	
	if _G.current_enemy.hp <= 0 and _G.current_enemy.is_alive then
		print("Enemy defeated. Current Enemy Index:", _G.Enemy_index)
		_G.current_enemy = enemy.respawner()
	end
end

function on_input(self, action_id, action)
	debug.on_input(action_id, action)
	
	_G.cursor.move_cursor_sprite(action)
	
	_G.vfx.run_on_input_action(action)
	if action_id == hash("touch") and action.pressed then
		-- In Game
		if gui.pick_node(_G.Enemy_node, action.x, action.y)then
			
			_G.damage.deal("neutral", _G.cursor.get_neutral_damage() )
			_G.vfx.trigger_damage_number_on_click(action, _G.cursor.get_neutral_damage(), "neutral")
			_G.damage.deal_multiple(_G.cursor.extra_damage_value)
			
			if _G.cursor.extra_damage_value["neutral"] > 0 then
				_G.vfx.trigger_damage_number("neutral", _G.cursor.extra_damage_value["neutral"])
			end
		end

		if gui.pick_node(gui.get_node(hash("cursor_upgrade_button")), action.x, action.y)then
			shop_buttons.SkillUpgrade(_G.cursor, false, _G.cursor.price_bonus, true)
		end
		
		for _, skill in ipairs(_G.skills.all_skills_passive_damage) do
			-- shop
			if gui.pick_node(gui.get_node(hash(skill.shop_button)), action.x, action.y)then
				shop_buttons.SkillUpgrade(skill, true, 1.0, false)
				passive_skills_functions.update_tick_damage()
			end
			
			-- skill
			if gui.pick_node(gui.get_node(hash(skill.skill_button)), action.x, action.y) then
			active_skills.UseSkill(skill)
			end
		end
		

		
	end
	return druid_manager.druid:on_input(action_id, action) -- FAVOR NAO MEXER
end